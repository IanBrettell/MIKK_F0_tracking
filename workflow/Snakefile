include: "rules/00_common.smk"
include: "rules/01_pre-processing.smk"
include: "rules/02_tracking.smk"
include: "rules/03_qc.smk"
include: "rules/04_hmm.smk"
include: "rules/05_plots_and_vids.smk"

##### Target rules #####

rule all:
    input:
#####################
# 01_pre-processing.smk
#####################
## copy_videos
#        expand(os.path.join(config["working_dir"], "raw_videos/{sample}.avi"),
#                sample = SAMPLES
#        ),
#        expand(rules.recode_videos.output,
#                sample = list(set(SAMPLES_ZIP))
#        ),
#        expand(rules.set_split_coords.output,
#                zip,
#                assay = AS_ASSAYS,
#                sample = AS_SAMPLES
#        ),
#        expand(rules.split_videos.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP
#        ),
#        rules.get_split_video_dims.output,
######################
## 02_tracking.smk
######################
#        expand(rules.track_videos.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP       
#        ),
######################
## 03_qc.smk
######################
#        expand(rules.assign_ref_test.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP    
#        ),
#        rules.tracking_success.output,
######################
## 04_hmm.smk
######################
#        expand(rules.movement_metrics.output,
#                zip,
#                assay = ASSAYS_ZIP_TRK_INT,
#                sample = SAMPLES_ZIP_TRK_INT,
#                quadrant = QUADRANTS_ZIP_TRK_INT,                
#                interval = INTERVALS_ZIP_TRK_INT
#        ),
#        expand(rules.merge_csvs.output,
#                interval = config["seconds_interval"]
#        ),
#        expand(rules.send_to_shared_folder.output,
#                interval = config["seconds_interval"]
#        ),
######################
## 05_plots_and_vids.smk
######################
#        expand(rules.get_line_ranks_and_colours.output,
#                interval = 0.05
#        ),
#        expand(rules.coloured_trails_labels.output,
#                zip,
#                assay = ASSAYS_ZIP_TRK,
#                sample = SAMPLES_ZIP_TRK,
#                quadrant = QUADRANTS_ZIP_TRK,
#                interval = 0.05
#        ),
#        expand(rules.stitch_tracked_vids.output,
#                zip,
#                assay = ASSAYS_ZIP_TRK,
#                sample = SAMPLES_ZIP_TRK,
#                interval = [0.05]*len(SAMPLES_ZIP_TRK)
#        ),
#        expand(rules.path_frames_to_vid.output,
#                zip,
#                assay = ASSAYS_ZIP_TRK,
#                sample = SAMPLES_ZIP_TRK,
#                interval = [0.05]*len(SAMPLES_ZIP_TRK)
#        ),
#        expand(rules.compile_two_panel_vid.output,
#                assay = "open_field",
#                sample = ["20191112_1236_18-2_L_A","20191116_1039_18-2_L_B","20191119_1459_18-2_R_C","20191113_1557_22-1_L_A","20191117_1122_22-1_L_B","20191119_1552_22-1_R_C"],
#                interval = 0.08
#        ),
#        expand(rules.two_panel_short.output,
#                assay = "open_field",
#                sample = ["20191112_1236_18-2_L_A","20191116_1039_18-2_L_B","20191119_1459_18-2_R_C","20191113_1557_22-1_L_A","20191117_1122_22-1_L_B","20191119_1552_22-1_R_C"],
#                interval = 0.08
#        ),
#        expand(rules.hmm_path_frames_to_vid.output,
#                zip,
#                assay = ASSAYS_ZIP_TRK.tolist()*2,
#                sample = SAMPLES_ZIP_TRK.tolist()*2,
#                interval = [0.05]*len(SAMPLES_ZIP_TRK)*2,
#                ref_test = np.repeat(REF_TEST, len(SAMPLES_ZIP_TRK))
#        ),
#        expand(rules.compile_four_panel_vid.output,
#                zip,
#                interval = [0.05]*len(SAMPLES_ZIP_TRK),
#                assay = ASSAYS_ZIP_TRK,
#                sample = SAMPLES_ZIP_TRK
#        ),
#        expand(rules.four_panel_short.output,
#                zip,
#                interval = [0.05]*len(SAMPLES_ZIP_TRK),
#                assay = ASSAYS_ZIP_TRK,
#                sample = SAMPLES_ZIP_TRK
#        ),
        expand(rules.get_paths_frame_grab.output,
                interval = 0.05,
                assay = "open_field",
                sample = ["20191112_1236_18-2_L_A", "20191116_1039_18-2_L_B", "20191113_1557_22-1_L_A", "20191117_1122_22-1_L_B", "20191111_1558_10-1_L_A", "20191115_1633_10-1_L_B"],
                second = 300
        ),
        rules.combine_path_frames_per_sample.output,
        expand(rules.get_four_panel_frame_grab.output,
                interval = 0.05,
                assay = ["open_field", "novel_object"],
                sample = ["20191114_1040_8-2_L_A", "20191118_1224_8-2_R_B", "20191112_1236_18-2_L_A", "20191116_1039_18-2_L_B", "20191119_1459_18-2_R_C", "20191114_1305_50-2_R_A", "20191116_1438_50-2_R_B", "20191120_1150_50-2_R_C", "20191112_1456_38-2_L_A", "20191116_1203_38-2_L_B", "20191113_1527_21-2_L_A", "20191116_1309_21-2_R_B", "20191114_1217_40-1_L_A", "20191118_1129_40-1_R_B"],
                second = 300
        ),
        expand(rules.four_panel_frame_grab_pdf.output,
                interval = 0.05,
                assay = ["open_field", "novel_object"],
                sample = ["20191114_1040_8-2_L_A", "20191118_1224_8-2_R_B", "20191112_1236_18-2_L_A", "20191116_1039_18-2_L_B", "20191119_1459_18-2_R_C", "20191114_1305_50-2_R_A", "20191116_1438_50-2_R_B", "20191120_1150_50-2_R_C", "20191112_1456_38-2_L_A", "20191116_1203_38-2_L_B", "20191113_1527_21-2_L_A", "20191116_1309_21-2_R_B", "20191114_1217_40-1_L_A", "20191118_1129_40-1_R_B"],
                second = 300
        ),        
