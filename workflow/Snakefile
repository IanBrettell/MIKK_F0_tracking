include: "rules/00_common.smk"
include: "rules/01_pre-processing.smk"
include: "rules/02_tracking.smk"
include: "rules/03_qc.smk"
include: "rules/04_hmm.smk"

##### Target rules #####

rule all:
    input:
#####################
# 01_pre-processing.smk
#####################
## copy_videos
#        expand(os.path.join(config["working_dir"], "raw_videos/{sample}.avi"),
#                sample = SAMPLES
#        ),
#        expand(rules.recode_videos.output,
#                sample = list(set(SAMPLES_ZIP))
#        ),
#        expand(rules.set_split_coords.output,
#                zip,
#                assay = AS_ASSAYS,
#                sample = AS_SAMPLES
#        ),
#        expand(rules.split_videos.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP
#        ),
######################
## 02_tracking.smk
######################
#        expand(rules.track_videos.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP       
#        ),
######################
## 03_qc.smk
######################
#        expand(rules.assign_ref_test.output,
#                zip,
#                assay = ASSAYS_ZIP,
#                sample = SAMPLES_ZIP,
#                quadrant = QUADRANTS_ZIP    
#        ),
        rules.tracking_success.output,
######################
## 04_hmm.smk
######################
        expand(rules.movement_metrics.output,
                zip,
                assay = ASSAYS_ZIP,
                sample = SAMPLES_ZIP,
                quadrant = QUADRANTS_ZIP,
                interval = [0.08] * len(ASSAYS_ZIP)
        ), 
        expand(rules.merge_csvs.output,
                interval = 0.08
        ),
        expand(rules.get_line_ranks_and_colours.output,
                interval = 0.08
        ),
        expand(rules.coloured_trails_labels.output,
                assay = ASSAYS_ZIP,
                sample = SAMPLES_ZIP,
                quadrant = QUADRANTS_ZIP,
                interval = [0.08] * len(ASSAYS_ZIP)
        ),
